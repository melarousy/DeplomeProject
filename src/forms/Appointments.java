/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import hospitalsystem.Data;
import hospitalsystem.DatabaseConnection;
import java.awt.ComponentOrientation;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.MaskFormatter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author m.amin
 */
public class Appointments extends javax.swing.JFrame {

private static final SimpleDateFormat sdfdate = new SimpleDateFormat("dd/MM/yyyy");
private static final SimpleDateFormat sdftime = new SimpleDateFormat("HH:mm");
Date date = new Date();
    int PatientID = 0;
    int clinicID = 0;
    int doctorID = 0;
    int AppointmentID = 0;
    DefaultComboBoxModel Patientdata = new DefaultComboBoxModel();
    DefaultComboBoxModel Patientiddata = new DefaultComboBoxModel();
    DefaultComboBoxModel doctordata = new DefaultComboBoxModel();
    DefaultComboBoxModel doctoriddata = new DefaultComboBoxModel();
    DefaultComboBoxModel clinicdata = new DefaultComboBoxModel();
    DefaultComboBoxModel cliniciddata = new DefaultComboBoxModel();
    String Query = "SELECT Appointments.id as [رقم الحجز], Appointments.pati_id, PATIENTS.Patient_NAME as [المريض],\n"
            + "Appointments.clinc_id,EMPLOYEES.EMP_NAME as [الطبيب], CLINIC.CLINIC_NAME as [العيادة],\n"
            + "Appointments.ap_date as [التاريخ],Appointments.ap_time as [الساعة],doctor_id FROM Appointments\n"
            + "INNER JOIN PATIENTS ON Appointments.pati_id = PATIENTS.ID \n"
            + "INNER JOIN CLINIC ON Appointments.clinc_id = CLINIC.ID\n"
            + "INNER JOIN EMPLOYEES ON Appointments.doctor_id = EMPLOYEES.ID \n"
            + "where Appointments.i=0 and PATIENTS.i=0 and CLINIC.i=0 and EMPLOYEES.i=0";

    /**
     * Creates new form Employees
     */
    private static Appointments obj = null;

    private Appointments() {
        initComponents();
        this.setTitle("حجز المواعيد");
        this.setLocationRelativeTo(null);
        Image icon = Toolkit.getDefaultToolkit().getImage(".\\src\\images\\icon.gif");
        this.setIconImage(icon);
        ((JLabel) cmbdoctor.getRenderer()).setHorizontalAlignment(JLabel.RIGHT);
        ((JLabel) cmbclinic.getRenderer()).setHorizontalAlignment(JLabel.RIGHT);
        this.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.jLabel3.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.jLabel4.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.jLabel5.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.jLabel8.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.jLabel9.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.txtdate.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.txttime.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.jTable1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        this.txtsearch.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        FillAppointmentsData();
        fillpatientcombobox();
        filldoctorcombobox();
        fillcliniccombobox();
        btnedite.setEnabled(false);
        btndelete.setEnabled(false);
        cmbclinic.setSelectedIndex(-1);
        this.txtdate.setText(sdfdate.format(date));
        this.txttime.setText(sdftime.format(date));

    }

    public static Appointments getObj() {
        if (obj == null) {
            obj = new Appointments();
        }
        return obj;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbdoctor = new javax.swing.JComboBox<>();
        cmbclinic = new javax.swing.JComboBox<>();
        txttime = new javax.swing.JTextField();
        txtdate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnnew = new javax.swing.JButton();
        btnedite = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        txtsearch = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cmbpatient = new javax.swing.JComboBox<>();
        cmbpatientid = new javax.swing.JComboBox<>();
        cmbclinicid = new javax.swing.JComboBox<>();
        cmbdoctorid = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        cmbdoctor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmbdoctor.setForeground(new java.awt.Color(51, 51, 255));
        cmbdoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ذكر", "انثي" }));
        cmbdoctor.setSelectedIndex(-1);
        cmbdoctor.setPreferredSize(new java.awt.Dimension(175, 30));
        cmbdoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbdoctorActionPerformed(evt);
            }
        });

        cmbclinic.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmbclinic.setForeground(new java.awt.Color(51, 51, 255));
        cmbclinic.setPreferredSize(new java.awt.Dimension(175, 30));
        cmbclinic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbclinicActionPerformed(evt);
            }
        });

        txttime.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txttime.setForeground(new java.awt.Color(51, 51, 255));
        txttime.setPreferredSize(new java.awt.Dimension(175, 30));

        txtdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtdate.setForeground(new java.awt.Color(51, 51, 255));
        txtdate.setPreferredSize(new java.awt.Dimension(175, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setText("الساعة");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 255));
        jLabel4.setText("التاريخ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 255));
        jLabel5.setText("المريض");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 255));
        jLabel8.setText("العيادة");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 255));
        jLabel9.setText("الطبيب");

        btnnew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnnew.setForeground(new java.awt.Color(0, 0, 255));
        btnnew.setText("جديد");
        btnnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnewActionPerformed(evt);
            }
        });

        btnedite.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnedite.setForeground(new java.awt.Color(0, 0, 255));
        btnedite.setText("تعديل");
        btnedite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnediteActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(0, 0, 255));
        btnSave.setText("حفظ");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btndelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btndelete.setForeground(new java.awt.Color(0, 0, 255));
        btndelete.setText("حذف");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowGrid(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setText("لتعديل او حذف موعد قم باختياره من الجدول");

        txtsearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtsearch.setForeground(new java.awt.Color(51, 51, 255));
        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtsearchKeyTyped(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 51));
        jLabel14.setText("بحث بالاسم");

        cmbpatient.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmbpatient.setForeground(new java.awt.Color(51, 51, 255));
        cmbpatient.setPreferredSize(new java.awt.Dimension(175, 30));
        cmbpatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbpatientActionPerformed(evt);
            }
        });

        cmbpatientid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbpatientidActionPerformed(evt);
            }
        });

        cmbclinicid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbclinicidActionPerformed(evt);
            }
        });

        cmbdoctorid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbdoctoridActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 51));
        jLabel7.setText("hh:mm");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 51));
        jLabel10.setText("yyyy/mm/dd");

        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("h:mm"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btndelete)
                                        .addGap(27, 27, 27)
                                        .addComponent(btnSave)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnedite)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnnew)
                                        .addGap(59, 59, 59))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cmbclinicid, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(225, 225, 225)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(cmbpatientid, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel3))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cmbdoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(cmbclinic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(155, 155, 155)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addComponent(cmbdoctorid, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txttime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbpatient, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 775, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbclinic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbdoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbpatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbpatientid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbclinicid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbdoctorid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btndelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnedite, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnnew, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        AppointmentID = Integer.parseInt(jTable1.getModel().getValueAt(row, 0).toString());
        this.cmbpatient.setSelectedIndex(Integer.parseInt(jTable1.getModel().getValueAt(row, 1).toString()) - 1);
        this.cmbclinic.setSelectedIndex(Integer.parseInt(jTable1.getModel().getValueAt(row, 3).toString()) - 1);
        this.cmbdoctor.setSelectedIndex(Integer.parseInt(jTable1.getModel().getValueAt(row, 8).toString()) - 1);
        this.txtdate.setText(jTable1.getModel().getValueAt(row, 6).toString());
        this.txttime.setText(jTable1.getModel().getValueAt(row, 7).toString());

        btnSave.setEnabled(false);
        btnedite.setEnabled(true);
        btndelete.setEnabled(true);
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnewActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_btnnewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        Save_Data();
        reset();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbclinicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbclinicActionPerformed
        // TODO add your handling code here:
        clinicID = cmbclinic.getSelectedIndex() + 1;
        int index = cmbclinic.getSelectedIndex();
        if (index != -1) {
            cmbclinicid.setSelectedIndex(index);
        }
    }//GEN-LAST:event_cmbclinicActionPerformed

    private void cmbdoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbdoctorActionPerformed
        // TODO add your handling code here:
        doctorID = cmbdoctor.getSelectedIndex() + 1;
        int index = cmbdoctor.getSelectedIndex();
        if (index != -1) {
            cmbdoctorid.setSelectedIndex(index);
        }
    }//GEN-LAST:event_cmbdoctorActionPerformed

    private void btnediteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnediteActionPerformed
        // TODO add your handling code here:
        Edite_Data();
        reset();
    }//GEN-LAST:event_btnediteActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        // TODO add your handling code here:
        Delete_Data();
        reset();
    }//GEN-LAST:event_btndeleteActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        obj = null;
        Appointments.getObj().dispose();
    }//GEN-LAST:event_formWindowClosed

    private void txtsearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyTyped
        // TODO add your handling code here:

        String Query2 = "SELECT Appointments.id as [رقم الحجز], Appointments.pati_id, PATIENTS.Patient_NAME as [المريض],\n"
                + "Appointments.clinc_id,EMPLOYEES.EMP_NAME as [الطبيب], Appointments.CLINIC_NAME as [العيادة],\n"
                + "Appointments.ap_date as [التاريخ],Appointments.ap_time as [الساعة],doctor_id  FROM Appointments\n"
                + "INNER JOIN PATIENTS ON Appointments.pati_id = PATIENTS.ID \n"
                + "INNER JOIN CLINIC ON Appointments.clinc_id = CLINIC.ID\n"
                + "INNER JOIN EMPLOYEES ON Appointments.doctor_id = EMPLOYEES.ID \n"
                + "where PATIENTS.Patient_NAME like '" + this.txtsearch.getText() + "' + '%' and Appointments.i=0 and PATIENTS.i=0 and CLINIC.i=0 and EMPLOYEES.i=0";

        SearchByName(Query2);
    }//GEN-LAST:event_txtsearchKeyTyped

    private void cmbpatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbpatientActionPerformed
        // TODO add your handling code here:
        PatientID = cmbpatient.getSelectedIndex() + 1;
        int index = cmbpatient.getSelectedIndex();
        if (index != -1) {
            cmbpatientid.setSelectedIndex(index);
        }

    }//GEN-LAST:event_cmbpatientActionPerformed

    private void cmbpatientidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbpatientidActionPerformed
        // TODO add your handling code here:
        int index = cmbpatientid.getSelectedIndex();
        if (index != -1) {
            cmbpatient.setSelectedIndex(index);
        }
    }//GEN-LAST:event_cmbpatientidActionPerformed

    private void cmbclinicidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbclinicidActionPerformed
        // TODO add your handling code here:
        int index = cmbclinicid.getSelectedIndex();
        if (index != -1) {
            cmbclinic.setSelectedIndex(index);
        }
    }//GEN-LAST:event_cmbclinicidActionPerformed

    private void cmbdoctoridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbdoctoridActionPerformed
        // TODO add your handling code here:
        int index = cmbdoctorid.getSelectedIndex();
        if (index != -1) {
            cmbdoctor.setSelectedIndex(index);
        }
    }//GEN-LAST:event_cmbdoctoridActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appointments().setVisible(true);
            }
        });
    }

    private void reset() {

        this.txtdate.setText("");
        this.txttime.setText("");
        btnSave.setEnabled(true);
        btnedite.setEnabled(false);
        btndelete.setEnabled(false);
        this.cmbdoctor.setSelectedIndex(-1);
        this.cmbclinic.setSelectedIndex(-1);
        FillAppointmentsData();
    }

    private void FillAppointmentsData() {
        jTable1.setModel(DbUtils.resultSetToTableModel(Data.Get_Data(Query)));
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
        }
        ((DefaultTableCellRenderer) jTable1.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.RIGHT);
//        jTable1.removeColumn(jTable1.getColumnModel().getColumn(1));
//        jTable1.removeColumn(jTable1.getColumnModel().getColumn(2));
//        jTable1.removeColumn(jTable1.getColumnModel().getColumn(6));

    }

    private void SearchByName(String sql) {
        jTable1.setModel(DbUtils.resultSetToTableModel(Data.Get_Data(sql)));
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
        }
        ((DefaultTableCellRenderer) jTable1.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.RIGHT);

        jTable1.removeColumn(jTable1.getColumnModel().getColumn(1));
        jTable1.removeColumn(jTable1.getColumnModel().getColumn(2));
        jTable1.removeColumn(jTable1.getColumnModel().getColumn(6));
    }

    private void fillpatientcombobox() {
        Patientdata.removeAllElements();
        String sql1 = "select ID,Patient_NAME from PATIENTS where  I=0";
        ResultSet rs = Data.Get_Data(sql1);
        try {

            while (rs.next()) {
                Patientdata.addElement(rs.getString("Patient_NAME"));
                Patientiddata.addElement(rs.getString("ID"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
        cmbpatient.setModel(Patientdata);
        cmbpatientid.setModel(Patientiddata);
    }

    private void filldoctorcombobox() {
        doctordata.removeAllElements();
        String sql1 = "select ID,EMP_NAME from EMPLOYEES where EMP_JObID=2 and I=0";
        ResultSet rs = Data.Get_Data(sql1);
        try {

            while (rs.next()) {
                doctordata.addElement(rs.getString("EMP_NAME"));
                doctoriddata.addElement(rs.getString("ID"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
        cmbdoctor.setModel(doctordata);
        cmbdoctorid.setModel(doctoriddata);
    }

    private void fillcliniccombobox() {
        clinicdata.removeAllElements();
        String sql1 = "select ID,CLINIC_NAME from CLINIC where I=0";
        ResultSet rs = Data.Get_Data(sql1);
        try {

            while (rs.next()) {
                clinicdata.addElement(rs.getString("CLINIC_NAME"));
                cliniciddata.addElement(rs.getString("ID"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
        cmbclinic.setModel(clinicdata);
        cmbclinicid.setModel(cliniciddata);
    }

    private boolean checkinput() {
        if (cmbpatient.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "اختر المريض", "خطأ", JOptionPane.ERROR_MESSAGE);
            cmbpatient.requestFocus();
            return false;
        } else if (cmbclinic.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "اختر العيادة", "خطأ", JOptionPane.ERROR_MESSAGE);
            cmbclinic.requestFocus();
            return false;
        } else if (cmbdoctor.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "اختر الطبيب", "خطأ", JOptionPane.ERROR_MESSAGE);
            cmbdoctor.requestFocus();
            return false;
        }
        if (txtdate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "ادخل التاريخ", "خطأ", JOptionPane.ERROR_MESSAGE);
            txtdate.requestFocus();
            return false;
        } else if (!txtdate.getText().matches("^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$")) {
            JOptionPane.showMessageDialog(this, "ادخل التاريخ بصيغة صحيحة", "خطأ", JOptionPane.ERROR_MESSAGE);
            txtdate.requestFocus();
            return false;
        } else if (txttime.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "ادخل الساعة", "خطأ", JOptionPane.ERROR_MESSAGE);
            txttime.requestFocus();
            return false;
        } else if (!txttime.getText().matches("^[0-2]?[0-9]:[0-5]?[0-9]")) {
            JOptionPane.showMessageDialog(this, "ادخل الوقت بصيغة صحيحة - مثال  04:45", "خطأ", JOptionPane.ERROR_MESSAGE);
            txttime.requestFocus();
            return false;
        } else {
            return true;
        }

    }

    public void Save_Data() {

        if (checkinput()) {

            try {
                String sql1 = "Select ID,Patient_NAME ,I from PATIENTS "
                        + "where Patient_NAME= '" + txtdate.getText() + "' or Patient_ID = '" + txtdate.getText() + "'";

                ResultSet rs = Data.Get_Data(sql1);

                if (rs.next()) {
                    if (rs.getInt("I") == 0) {
                        JOptionPane.showMessageDialog(this, "يوجد مريض بنفس البيانات", "خطأ", JOptionPane.ERROR_MESSAGE);
                        txtdate.requestFocus();
                    } else {
                        try {
                            int P = JOptionPane.showConfirmDialog(this, "المريض محذوف هل تريد استعادته", "تأكيد", JOptionPane.YES_NO_OPTION);
                            if (P == 0) {
                                String sql = "update PATIENTS set I='" + 0 + "' where ID='" + rs.getInt("ID") + "'";
                                int i = Data.Save_Data(sql);
                                if (i == 0) {
                                    JOptionPane.showMessageDialog(this, "تم استعادة المريض", "استعادة مريض", JOptionPane.INFORMATION_MESSAGE);
                                    btnSave.setEnabled(true);
                                    btnedite.setEnabled(false);
                                    btndelete.setEnabled(false);
                                    FillAppointmentsData();
                                }

                            }

                        } catch (HeadlessException | SQLException ex) {
                            JOptionPane.showMessageDialog(this, ex);
                        }

                    }

                } else {
                    String sql = "INSERT INTO PATIENTS\n"
                            + " (Patient_NAME,Patient_ID,Patient_BIRTH,Patient_JOb,Patient_NATIO,\n"
                            + " Patient_TYPE,Patient_MRITAL,Patient_MOBI,Patient_ADDRSS,DATE_OPEN,I)\n"
                            + "VALUES ('" + txtdate.getText() + "','" + txtdate.getText() + "','" + txtdate.getText() + "','" + txtdate.getText() + "','" + txtdate.getText() + "',\n"
                            + " '" + txtdate.getText() + "','" + txtdate.getText() + "','" + txtdate.getText() + "','" + txtdate.getText() + "','" + txttime.getText() + "',0)";
                    int i = Data.Save_Data(sql);
                    if (i == 0) {
                        JOptionPane.showMessageDialog(this, "تم الحفظ بنجاح", "اضافة مريض", JOptionPane.INFORMATION_MESSAGE);
                        FillAppointmentsData();
                        btnSave.setEnabled(false);
                    }

                }

            } catch (HeadlessException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex);
            }

        }

    }

    public void Edite_Data() {

        if (checkinput()) {
            try {

                String sql1 = "Select ID,Patient_NAME ,I from PATIENTS "
                        + "where ID != '" + AppointmentID + "' and (Patient_NAME= '" + txtdate.getText() + "' or Patient_NATIO = '" + txtdate.getText() + "' ) ";

                ResultSet rs = Data.Get_Data(sql1);
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "يوجد مريض بنفس البيانات", "خطأ", JOptionPane.ERROR_MESSAGE);
                    txtdate.requestFocus();

                } else {

                    int P = JOptionPane.showConfirmDialog(this, "هل تريد تعديل بيانات المريض", "تأكيد", JOptionPane.YES_NO_OPTION);
                    if (P == 0) {
                        String sql = "update  PATIENTS set Patient_NAME='" + txtdate.getText() + "',Patient_ID='" + txtdate.getText() + "',Patient_BIRTH='" + txtdate.getText() + "'\n"
                                + " ,Patient_JOb='" + txtdate.getText() + "',Patient_NATIO='" + txtdate.getText() + "',Patient_TYPE='" + txtdate.getText() + "'\n"
                                + " ,Patient_MRITAL='" + txtdate.getText() + "',Patient_MOBI='" + txtdate.getText() + "',Patient_ADDRSS='" + txtdate.getText() + "'"
                                + ",DATE_OPEN='" + txttime.getText() + "'  where ID='" + AppointmentID + "'";
                        int i = Data.Save_Data(sql);
                        if (i == 0) {
                            JOptionPane.showMessageDialog(this, "تم التعديل بنجاح", "تعديل مريض", JOptionPane.INFORMATION_MESSAGE);
                            reset();
                        }
                    }
                }

            } catch (HeadlessException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex);
            }

        }

    }

    public void Delete_Data() {
        try {
            int P = JOptionPane.showConfirmDialog(this, "سيتم حذف المريض ولن تتمكن من استعادته", "تأكيد", JOptionPane.YES_NO_OPTION);
            if (P == 0) {
                Connection con = DatabaseConnection.con();
                PreparedStatement pst = null;

                String sql = "update PATIENTS set I='" + 1 + "' where ID='" + AppointmentID + "'";

                pst = con.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(this, "تم الحذف بنجاح", "حذف مريض", JOptionPane.INFORMATION_MESSAGE);
                btnSave.setEnabled(true);
                btnedite.setEnabled(false);
                btndelete.setEnabled(false);
                FillAppointmentsData();
            }

        } catch (HeadlessException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnedite;
    private javax.swing.JButton btnnew;
    private javax.swing.JComboBox<String> cmbclinic;
    private javax.swing.JComboBox<String> cmbclinicid;
    private javax.swing.JComboBox<String> cmbdoctor;
    private javax.swing.JComboBox<String> cmbdoctorid;
    private javax.swing.JComboBox<String> cmbpatient;
    private javax.swing.JComboBox<String> cmbpatientid;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtdate;
    private javax.swing.JTextField txtsearch;
    private javax.swing.JTextField txttime;
    // End of variables declaration//GEN-END:variables
}
